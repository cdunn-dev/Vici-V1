import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { planGeneratorSchema, type PlanGeneratorFormData } from "./plan-generator-schema";
import { Wand2, Loader2 } from "lucide-react";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Slider } from "@/components/ui/slider";
import { Calendar } from "@/components/ui/calendar";
import { useToast } from "@/hooks/use-toast";
import { format, addWeeks, nextMonday } from "date-fns";
import {
  TrainingGoals,
  RaceDistances,
  ExperienceLevels,
  ExperienceLevelDescriptions,
  FitnessLevels,
  FitnessLevelDescriptions,
  DaysOfWeek,
  CoachingStyles,
  CoachingStyleDescriptions,
} from "./plan-generator-constants";

interface PlanGeneratorProps {
  existingPlan?: boolean;
  onPreview?: (plan: PlanGeneratorFormData & { endDate: Date }) => void;
}

export default function PlanGenerator({ existingPlan, onPreview }: PlanGeneratorProps) {
  const [open, setOpen] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [currentStep, setCurrentStep] = useState(1);
  const { toast } = useToast();

  const form = useForm<PlanGeneratorFormData>({
    resolver: zodResolver(planGeneratorSchema),
    defaultValues: {
      startDate: new Date().toISOString(),
      runningExperience: {
        level: ExperienceLevels.BEGINNER,
        fitnessLevel: FitnessLevels.SOLID_BASE,
      },
      trainingPreferences: {
        weeklyRunningDays: 4,
        maxWeeklyMileage: 20,
        weeklyWorkouts: 1,
        preferredLongRunDay: DaysOfWeek.SATURDAY,
        coachingStyle: CoachingStyles.COLLABORATIVE,
      },
    },
  });

  const onSubmit = async (data: PlanGeneratorFormData) => {
    try {
      setIsSubmitting(true);
      console.log("Form submitted with data:", data);

      if (onPreview) {
        const endDate = data.targetRace?.date
          ? new Date(data.targetRace.date)
          : addWeeks(new Date(data.startDate), 12);

        const planData = {
          ...data,
          endDate,
        };

        onPreview(planData);
        setOpen(false);
      }
    } catch (error) {
      console.error("Form submission error:", error);
      toast({
        title: "Error",
        description: "Failed to submit form. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleNextStep = () => {
    setCurrentStep(currentStep + 1);
  };

  const handlePreviousStep = () => {
    setCurrentStep(currentStep - 1);
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button size="lg" className="gap-2 bg-primary hover:bg-primary/90">
          <Wand2 className="h-5 w-5" />
          Create New Training Plan
        </Button>
      </DialogTrigger>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle>Create Training Plan</DialogTitle>
          {existingPlan && (
            <p className="text-sm text-muted-foreground">
              You already have an active training plan. Creating a new plan will
              replace your current one.
            </p>
          )}
        </DialogHeader>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            {currentStep === 1 && (
              <>
                <FormField
                  control={form.control}
                  name="goal"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Training Goal</FormLabel>
                      <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select your goal" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {Object.entries(TrainingGoals).map(([key, value]) => (
                            <SelectItem key={key} value={value}>
                              {value}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {form.watch("goal") === TrainingGoals.PERSONAL_BEST && (
                  <FormField
                    control={form.control}
                    name="targetRace.previousBest"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Previous Personal Best (optional)</FormLabel>
                        <FormControl>
                          <Input placeholder="Enter your previous best time" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                )}

                {form.watch("goal") === TrainingGoals.FIRST_RACE && (
                  <FormField
                    control={form.control}
                    name="targetRace.goalTime"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Goal Time (optional)</FormLabel>
                        <FormControl>
                          <Input placeholder="Enter your goal time" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                )}
              </>
            )}

            {currentStep === 2 && (
              <>
                <FormField
                  control={form.control}
                  name="runningExperience.level"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Running Experience Level</FormLabel>
                      <FormDescription>
                        {ExperienceLevelDescriptions[field.value as keyof typeof ExperienceLevelDescriptions]}
                      </FormDescription>
                      <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select your level" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {Object.entries(ExperienceLevels).map(([key, value]) => (
                            <SelectItem key={key} value={value}>
                              {value}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="runningExperience.fitnessLevel"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Current Fitness Level</FormLabel>
                      <FormDescription>
                        {FitnessLevelDescriptions[field.value as keyof typeof FitnessLevelDescriptions]}
                      </FormDescription>
                      <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select your fitness level" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {Object.entries(FitnessLevels).map(([key, value]) => (
                            <SelectItem key={key} value={value}>
                              {value}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </>
            )}

            {currentStep === 3 && (
              <>
                <FormField
                  control={form.control}
                  name="trainingPreferences.weeklyRunningDays"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Weekly Running Days</FormLabel>
                      <FormDescription>How many days per week would you like to run?</FormDescription>
                      <FormControl>
                        <Slider
                          min={1}
                          max={7}
                          step={1}
                          value={[field.value]}
                          onValueChange={(vals) => field.onChange(vals[0])}
                        />
                      </FormControl>
                      <div className="text-sm text-muted-foreground text-center">
                        {field.value} days per week
                      </div>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="trainingPreferences.maxWeeklyMileage"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Maximum Weekly Mileage</FormLabel>
                      <FormDescription>
                        What's the highest weekly mileage you'd like to reach during training?
                      </FormDescription>
                      <FormControl>
                        <Slider
                          min={5}
                          max={150}
                          step={5}
                          value={[field.value]}
                          onValueChange={(vals) => field.onChange(Math.round(vals[0] / 5) * 5)}
                        />
                      </FormControl>
                      <div className="text-sm text-muted-foreground text-center">
                        {field.value} miles per week
                      </div>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </>
            )}

            {currentStep === 4 && (
              <>
                <FormField
                  control={form.control}
                  name="trainingPreferences.preferredLongRunDay"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Preferred Long Run Day</FormLabel>
                      <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select your preferred day" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {Object.entries(DaysOfWeek).map(([key, value]) => (
                            <SelectItem key={key} value={value}>
                              {value}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="trainingPreferences.coachingStyle"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Desired Coaching Style</FormLabel>
                      <FormDescription>
                        {CoachingStyleDescriptions[field.value as keyof typeof CoachingStyleDescriptions]}
                      </FormDescription>
                      <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select coaching style" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {Object.entries(CoachingStyles).map(([key, value]) => (
                            <SelectItem key={key} value={value}>
                              {value}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </>
            )}

            {currentStep === 5 && (
              <>
                <FormField
                  control={form.control}
                  name="startDate"
                  render={({ field }) => (
                    <FormItem className="flex flex-col">
                      <FormLabel>When would you like to start?</FormLabel>
                      <div className="flex gap-4 mb-4">
                        <Button
                          type="button"
                          variant="outline"
                          onClick={() => field.onChange(new Date().toISOString())}
                        >
                          Start Today
                        </Button>
                        <Button
                          type="button"
                          variant="outline"
                          onClick={() => field.onChange(nextMonday(new Date()).toISOString())}
                        >
                          Start Next Week
                        </Button>
                      </div>
                      <Calendar
                        mode="single"
                        selected={field.value ? new Date(field.value) : undefined}
                        onSelect={(date) => field.onChange(date?.toISOString())}
                        disabled={(date) => date < new Date()}
                        className="rounded-md border"
                      />
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="goalDescription"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>
                        Is there anything else you like to tell your coach about your running goals that might be helpful?
                      </FormLabel>
                      <FormControl>
                        <Input
                          placeholder="E.g., I'm training for a hilly marathon"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </>
            )}

            <div className="flex justify-between">
              {currentStep > 1 && (
                <Button type="button" variant="outline" onClick={handlePreviousStep}>
                  Previous
                </Button>
              )}
              {currentStep < 5 ? (
                <Button type="button" onClick={handleNextStep}>
                  Next
                </Button>
              ) : (
                <Button type="submit" className="w-full" disabled={isSubmitting}>
                  {isSubmitting ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Generating Plan...
                    </>
                  ) : (
                    "Preview Plan"
                  )}
                </Button>
              )}
            </div>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}

// ... (helper objects)